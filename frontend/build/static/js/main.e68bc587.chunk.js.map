{"version":3,"sources":["api.js","components/SourcePicker.js","components/TransFactorPicker.js","components/DNATextField.js","components/PredictionShowcase.js","components/WorkflowManager.js","App.js","serviceWorker.js","index.js"],"names":["domain_name","sources","value","label","key","SourcePicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","values","react_default","a","createElement","className","react_select_esm","options","components","makeAnimated","isMulti","placeholder","Component","TransFactorPicker","event","JSON","parse","target","console","log","concat","defaultValue","disabled","factors","map","factor","stringify","id","matrix_id","type","react_spinners","color","loading","DNATextField","match","text","PredictionShowcase","_this$props","DNA","predictions","data","labels","split","slice","length","datasets","backgroundColor","borderColor","highestIndex","l","max","maxIndex","i","Number","findHighestIndex","es","initialState","showTransFactors","showDNA","showPrediction","loadingAvailableTransFactors","errorAvailableTransFactors","jasparTransFactors","uniprobeTransFactors","selectedSources","selectedTransFactor","loadingPFM","errorPFM","PFM","loadingPredictions","errorPredictions","WorkflowManager","state","onSourceChange","onTransFactorChange","onDNAChange","_this2","setState","axios","get","then","res","_res$data","jaspar","uniprobe","val","transfactor","matrixId","_this3","_this4","getSeqProb","sequence","pwm","post","debounceTimer","clearTimeout","setTimeout","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","source","err","return","sort","b","localeCompare","components_SourcePicker","components_TransFactorPicker","components_DNATextField","components_PredictionShowcase","App","components_WorkflowManager","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e68bc587.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// const domain_name = \"http://localhost:5000\";\nconst domain_name = \"https://mol3022-server.herokuapp.com\";\n\nexport const getJasparTransFactorList = () =>\n  axios.get(`${domain_name}/matrix`);\n\nexport const getProbabilityFrequencyMatrix = (matrixId, type) => {\n  if (type === \"jaspar\") {\n    return axios.get(`${domain_name}/jaspar/matrix/${matrixId}`);\n  } else if (type === \"uniprobe\") {\n    return axios.get(`${domain_name}/uniprobe/matrix/${matrixId}`);\n  }\n};\n\nexport const getSequenceProbabilities = (sequence, pwm) =>\n  axios.post(`${domain_name}/probabilities`, {\n    sequence: sequence,\n    pwm: pwm,\n  });\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/lib/animated\";\n\nconst sources = [\n  {\n    value: \"jaspar\",\n    label: \"Jaspar Database\",\n    key: \"jaspar\",\n  },\n  {\n    value: \"uniprobe\",\n    label: \"UniProbe Database\",\n    key: \"uniprobe\",\n  },\n];\n\nclass SourcePicker extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(values) {\n    this.props.onChange(values);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Select\n          options={sources}\n          onChange={this.onChange}\n          components={makeAnimated()}\n          isMulti\n          placeholder=\"Choose databases you want to search in\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default SourcePicker;\n","import React, { Component } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\n\nclass TransFactorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    const value = JSON.parse(event.target.value);\n    console.log(`chose factor: ${value}`);\n    console.log(value);\n\n    this.props.onChange(value);\n  }\n\n  render() {\n    return (\n      <div className=\"container transFactor\">\n        <select\n          onChange={this.onChange}\n          className=\"transFactorSelect\"\n          defaultValue=\"\"\n        >\n          <option value=\"\" disabled className=\"transFactorOption\">\n            Choose a transcription factor\n          </option>\n          {this.props.factors.map(factor => (\n            <option\n              value={JSON.stringify({\n                id: factor.matrix_id,\n                type: factor.type,\n              })}\n              key={factor.matrix_id}\n              className=\"transFactorOption\"\n            >\n              {factor.matrix_id}\n            </option>\n          ))}\n        </select>\n        <ClipLoader color={\"#673AB7\"} loading={this.props.loading} />\n      </div>\n    );\n  }\n}\n\nexport default TransFactorPicker;\n","import React, { Component } from \"react\";\n\nclass DNATextField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    const value = event.target.value;\n    if (value.match(/^[acgtACGT]*$/)) {\n      this.props.onChange(value);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <input\n          className=\"DNAText\"\n          type=\"text\"\n          value={this.props.text}\n          onChange={this.onChange}\n          placeholder=\"Please enter DNA sequence for analysis (Characters acgt or ACGT)\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default DNATextField;\n","import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst findHighestIndex = l => {\n  let max = -99999;\n  let maxIndex = -1;\n  for (let i in l) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return Number(maxIndex);\n};\n\nclass PredictionShowcase extends Component {\n  render() {\n    const { DNA, predictions } = this.props;\n\n    const data = {\n      labels: DNA.split(\"\").slice(0, predictions.length),\n      datasets: [\n        {\n          label: \"Transcription Factor Binding Site Start Score\",\n          data: predictions,\n          backgroundColor: \"rgba(0,0,0,0)\",\n          borderColor: \"rgba(103,58,183,0.8)\",\n        },\n      ],\n    };\n\n    const highestIndex = findHighestIndex(predictions);\n\n    return (\n      <div className=\"container\">\n        {highestIndex < 0 || (\n          <div>\n            Highest binding score at position: <span>{highestIndex + 1}</span>\n          </div>\n        )}\n\n        <Line data={data} />\n      </div>\n    );\n  }\n}\n\nexport default PredictionShowcase;\n","import React, { Component } from \"react\";\nimport {\n  getJasparTransFactorList,\n  getProbabilityFrequencyMatrix,\n  getSequenceProbabilities,\n} from \"../api\";\n\nimport AlgorithmPicker from \"./SourcePicker\";\nimport TransFactorPicker from \"./TransFactorPicker\";\nimport DNATextField from \"./DNATextField\";\nimport PredictionShowcase from \"./PredictionShowcase\";\n\nconst initialState = {\n  showTransFactors: false,\n  showDNA: false,\n  showPrediction: false,\n\n  loadingAvailableTransFactors: false,\n  errorAvailableTransFactors: false,\n  jasparTransFactors: [],\n  uniprobeTransFactors: [],\n\n  selectedSources: [],\n  selectedTransFactor: \"\",\n\n  loadingPFM: false,\n  errorPFM: false,\n  PFM: [],\n\n  DNA: \"\",\n\n  loadingPredictions: false,\n  errorPredictions: false,\n  predictions: [],\n};\n\nclass WorkflowManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.onSourceChange = this.onSourceChange.bind(this);\n    this.onTransFactorChange = this.onTransFactorChange.bind(this);\n    this.onDNAChange = this.onDNAChange.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"fetching data.\");\n    this.setState(\n      {\n        loadingAvailableTransFactors: true,\n      },\n      () => {\n        getJasparTransFactorList().then(\n          res => {\n            const { jaspar, uniprobe } = res.data;\n            this.setState({\n              jasparTransFactors: jaspar,\n              uniprobeTransFactors: uniprobe,\n              loadingAvailableTransFactors: false,\n            });\n          },\n          () =>\n            this.setState({\n              loadingAvailableTransFactors: false,\n              errorAvailableTransFactors: true,\n            }),\n        );\n      },\n    );\n  }\n\n  onSourceChange(sources) {\n    console.log(`Sources are now: ${sources.map(val => val.value)}`);\n\n    this.setState({\n      showTransFactors: true,\n      selectedSources: sources,\n    });\n  }\n\n  onTransFactorChange(transfactor) {\n    console.log(`TransFactor is now: ${transfactor.id}`);\n\n    this.setState({\n      selectedTransFactor: transfactor,\n      loadingPFM: true,\n      showDNA: false,\n      showPrediction: false,\n      predictions: [],\n    });\n    getProbabilityFrequencyMatrix(transfactor.id, transfactor.type).then(\n      res => {\n        this.setState({\n          showDNA: true,\n          showPrediction: true,\n          loadingPFM: false,\n          PFM: res.data,\n        });\n        if (this.state.DNA) {\n          // DNA is already entered\n          this.onDNAChange(this.state.DNA);\n        }\n      },\n      () => {\n        this.setState({\n          errorPFM: true,\n          loadingPFM: false,\n        });\n      },\n    );\n  }\n\n  onDNAChange(DNA) {\n    console.log(`DNA is now: ${DNA}`);\n\n    this.setState({\n      DNA: DNA,\n      loadingPredictions: true,\n    });\n\n    const getSeqProb = () =>\n      getSequenceProbabilities(DNA, this.state.PFM).then(\n        res => {\n          this.setState({\n            predictions: res.data,\n            loadingPredictions: false,\n          });\n        },\n        () =>\n          this.setState({\n            loadingPredictions: false,\n            errorPredictions: true,\n          }),\n      );\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(() => {\n      debounceTimer = null;\n      getSeqProb();\n    }, 500);\n  }\n\n  render() {\n    let factors = [];\n\n    for (let source of this.state.selectedSources) {\n      if (source.value === \"jaspar\") {\n        factors = factors.concat(this.state.jasparTransFactors);\n      } else if (source.value === \"uniprobe\") {\n        factors = factors.concat(this.state.uniprobeTransFactors);\n      }\n    }\n    factors.sort((a, b) => a[\"matrix_id\"].localeCompare(b[\"matrix_id\"]));\n\n    return (\n      <div className=\"container\">\n        <AlgorithmPicker onChange={this.onSourceChange} />\n        {!this.state.showTransFactors || (\n          <TransFactorPicker\n            onChange={this.onTransFactorChange}\n            factors={factors}\n            loading={this.state.loadingPFM}\n          />\n        )}\n        {!this.state.showDNA || (\n          <DNATextField onChange={this.onDNAChange} text={this.state.DNA} />\n        )}\n        {!this.state.showPrediction || <PredictionShowcase {...this.state} />}\n      </div>\n    );\n  }\n}\n\nlet debounceTimer = null;\n\nexport default WorkflowManager;\n","import React, { Component } from \"react\";\nimport WorkflowManager from \"./components/WorkflowManager\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          Unified Transcription Factor Binding Site Analysis Tool\n        </header>\n        <div className=\"content\">\n          <WorkflowManager />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}