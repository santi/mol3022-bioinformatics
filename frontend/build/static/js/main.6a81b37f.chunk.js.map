{"version":3,"sources":["api.js","components/SourcePicker.js","components/TransFactorPicker.js","components/DNATextField.js","components/PredictionShowcase.js","components/WorkflowManager.js","App.js","serviceWorker.js","index.js"],"names":["domain_name","sources","value","label","key","SourcePicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","values","react_default","a","createElement","className","react_select_esm","options","components","makeAnimated","isMulti","placeholder","Component","TransFactorPicker","event","target","defaultValue","disabled","factors","map","factor","matrix_id","name","react_spinners","color","loading","DNATextField","match","console","log","type","text","PredictionShowcase","_this$props","DNA","predictions","data","labels","split","slice","length","datasets","backgroundColor","borderColor","highestIndex","l","max","maxIndex","i","Number","findHighestIndex","es","initialState","showTransFactors","showDNA","showPrediction","loadingAvailableTransFactors","errorAvailableTransFactors","transFactors","selectedSources","selectedTransFactor","loadingPFM","errorPFM","PFM","loadingPredictions","errorPredictions","WorkflowManager","state","onSourceChange","onTransFactorChange","onDNAChange","_this2","setState","axios","get","concat","then","res","val","transfactor","matrixId","_this3","_this4","getSeqProb","sequence","pfm","post","debounceTimer","clearTimeout","setTimeout","components_SourcePicker","components_TransFactorPicker","components_DNATextField","components_PredictionShowcase","App","components_WorkflowManager","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a81b37f.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// const domain_name = \"http://localhost:5000\";\nconst domain_name = \"https://mol3022.herokuapp.com\";\n\nexport const getTransFactorList = () =>\n  axios.get(`${domain_name}/jaspar/matrix`);\n\nexport const getProbabilityFrequencyMatrix = matrixId =>\n  axios.get(`${domain_name}/jaspar/matrix/${matrixId}`);\n\nexport const getSequenceProbabilities = (sequence, pfm) =>\n  axios.post(`${domain_name}/probabilities`, {\n    sequence: sequence,\n    pfm: pfm,\n  });\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/lib/animated\";\n\nconst sources = [\n  {\n    value: \"jaspar\",\n    label: \"Jaspar Database\",\n    key: \"jaspar\",\n  },\n  {\n    value: \"uniprobe\",\n    label: \"UniProbe Database\",\n    key: \"uniprobe\",\n  },\n];\n\nclass SourcePicker extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(values) {\n    this.props.onChange(values);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Select\n          options={sources}\n          onChange={this.onChange}\n          components={makeAnimated()}\n          isMulti\n          placeholder=\"Choose databases you want to search in\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default SourcePicker;\n","import React, { Component } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\n\nclass TransFactorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"container transFactor\">\n        <select\n          onChange={this.onChange}\n          className=\"transFactorSelect\"\n          defaultValue=\"\"\n        >\n          <option value=\"\" disabled className=\"transFactorOption\">\n            Choose a transcription factor\n          </option>\n          {this.props.factors.map(factor => (\n            <option\n              value={factor.matrix_id}\n              key={factor.matrix_id}\n              className=\"transFactorOption\"\n            >\n              {factor.matrix_id}-{factor.name}\n            </option>\n          ))}\n        </select>\n        <ClipLoader color={\"#673AB7\"} loading={this.props.loading} />\n      </div>\n    );\n  }\n}\n\nexport default TransFactorPicker;\n","import React, { Component } from \"react\";\n\nclass DNATextField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    const value = event.target.value;\n    if (value.match(/^[acgtACGT]*$/)) {\n      console.log(\"match\");\n\n      this.props.onChange(value);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <input\n          className=\"DNAText\"\n          type=\"text\"\n          value={this.props.text}\n          onChange={this.onChange}\n          placeholder=\"Please enter DNA sequence for analysis (Charcters acgt or ACGT)\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default DNATextField;\n","import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst findHighestIndex = l => {\n  let max = -99999;\n  let maxIndex = -1;\n  for (let i in l) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return Number(maxIndex);\n};\n\nclass PredictionShowcase extends Component {\n  render() {\n    const { DNA, predictions } = this.props;\n\n    const data = {\n      labels: DNA.split(\"\").slice(0, predictions.length),\n      datasets: [\n        {\n          label: \"Transcription Factor Binding Site Start Score\",\n          data: predictions,\n          backgroundColor: \"rgba(0,0,0,0)\",\n          borderColor: \"rgba(103,58,183,0.8)\",\n        },\n      ],\n    };\n\n    const highestIndex = findHighestIndex(predictions);\n\n    return (\n      <div className=\"container\">\n        {highestIndex < 0 || (\n          <div>\n            Highest binding score at position: <span>{highestIndex + 1}</span>\n          </div>\n        )}\n\n        <Line data={data} />\n      </div>\n    );\n  }\n}\n\nexport default PredictionShowcase;\n","import React, { Component } from \"react\";\nimport {\n  getTransFactorList,\n  getProbabilityFrequencyMatrix,\n  getSequenceProbabilities,\n} from \"../api\";\n\nimport AlgorithmPicker from \"./SourcePicker\";\nimport TransFactorPicker from \"./TransFactorPicker\";\nimport DNATextField from \"./DNATextField\";\nimport PredictionShowcase from \"./PredictionShowcase\";\n\nconst initialState = {\n  showTransFactors: false,\n  showDNA: false,\n  showPrediction: false,\n\n  loadingAvailableTransFactors: false,\n  errorAvailableTransFactors: false,\n  transFactors: [],\n\n  selectedSources: [],\n  selectedTransFactor: \"\",\n\n  loadingPFM: false,\n  errorPFM: false,\n  PFM: [],\n\n  DNA: \"\",\n\n  loadingPredictions: false,\n  errorPredictions: false,\n  predictions: [],\n};\n\nclass WorkflowManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.onSourceChange = this.onSourceChange.bind(this);\n    this.onTransFactorChange = this.onTransFactorChange.bind(this);\n    this.onDNAChange = this.onDNAChange.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"fetching data.\");\n    this.setState(\n      {\n        loadingAvailableTransFactors: true,\n      },\n      () => {\n        getTransFactorList().then(\n          res => {\n            const factors = res.data;\n            this.setState({\n              transFactors: factors,\n              loadingAvailableTransFactors: false,\n            });\n          },\n          () =>\n            this.setState({\n              loadingAvailableTransFactors: false,\n              errorAvailableTransFactors: true,\n            }),\n        );\n      },\n    );\n  }\n\n  onSourceChange(sources) {\n    console.log(`Sources are now: ${sources.map(val => val.value)}`);\n\n    this.setState({\n      showTransFactors: true,\n      selectedSources: sources,\n    });\n  }\n\n  onTransFactorChange(transfactor) {\n    console.log(`TransFactor is now: ${transfactor}`);\n\n    this.setState({\n      selectedTransFactor: transfactor,\n      loadingPFM: true,\n      showDNA: false,\n      showPrediction: false,\n      predictions: [],\n    });\n    getProbabilityFrequencyMatrix(transfactor).then(\n      res => {\n        this.setState({\n          showDNA: true,\n          showPrediction: true,\n          loadingPFM: false,\n          PFM: res.data,\n        });\n        if (this.state.DNA) {\n          // DNA is already entered\n          this.onDNAChange(this.state.DNA);\n        }\n      },\n      () => {\n        this.setState({\n          errorPFM: true,\n          loadingPFM: false,\n        });\n      },\n    );\n  }\n\n  onDNAChange(DNA) {\n    console.log(`DNA is now: ${DNA}`);\n\n    this.setState({\n      DNA: DNA,\n      loadingPredictions: true,\n    });\n\n    const getSeqProb = () =>\n      getSequenceProbabilities(DNA, this.state.PFM).then(\n        res => {\n          this.setState({\n            predictions: res.data,\n            loadingPredictions: false,\n          });\n        },\n        () =>\n          this.setState({\n            loadingPredictions: false,\n            errorPredictions: true,\n          }),\n      );\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n    debounceTimer = setTimeout(() => {\n      debounceTimer = null;\n      getSeqProb();\n    }, 500);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <AlgorithmPicker onChange={this.onSourceChange} />\n        {!this.state.showTransFactors || (\n          <TransFactorPicker\n            onChange={this.onTransFactorChange}\n            factors={this.state.transFactors}\n            loading={this.state.loadingPFM}\n          />\n        )}\n        {!this.state.showDNA || (\n          <DNATextField onChange={this.onDNAChange} text={this.state.DNA} />\n        )}\n        {!this.state.showPrediction || <PredictionShowcase {...this.state} />}\n      </div>\n    );\n  }\n}\n\nlet debounceTimer = null;\n\nexport default WorkflowManager;\n","import React, { Component } from \"react\";\nimport WorkflowManager from \"./components/WorkflowManager\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          Unified Transcription Factor Binding Site Analysis Tool\n        </header>\n        <div className=\"content\">\n          <WorkflowManager />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}